#ifndef _LOGIC_H_
#define _LOGIC_H_

#define FLAG_PERIODIC       (1u)
#define FLAG_BUTTON_PRESS   (2u)
#define FLAG_BATTERY_LOW    (4u)
#define FLAG_SHOW_VOLT      (8u)

/**
 * @brief The main loop delay.
 *
 * This constant represents the delay for the main loop, calculated as:
 * ~14992 * 0.667 ms ~ 10 seconds.
 */
enum { MAIN_DELAY = 14992 };

/**
 * @brief The delay for the voltage measurement loop.
 *
 * This constant represents the number of iterations for the main loop delay,
 * where (main loop delay) x DELAY_VOLTAGE_MEASURE ~ 10 seconds * 60 = 10 minutes.
 */
enum { DELAY_VOLTAGE_MEASURE = 60 };

/**
 * @brief The time each digit is on.
 *
 * This constant represents the duration for which each digit is active,
 * calculated as: 10 * 0.667 ms = 6.67 ms.
 */
enum { DIGIT_TIME_ON = 10 };

extern volatile uint16_t status;

struct dspl2d {
    uint8_t digit1;
    uint8_t digit0;
};

/**
 * @brief Initializes the board settings.
 *
 * This function configures the system clock, watchdog timer,
 * and input/output ports for the microcontroller. It also
 * enables the Non-Maskable Interrupt (NMI) and sets up
 * Timer A2 for periodic interrupts.
 *
 * The following configurations are performed:
 * - Stops the watchdog timer and configures NMI settings.
 * - Sets the DCO frequency to 1 MHz if calibration values are valid;
 *   otherwise, it sets default values.
 * - Configures the low-frequency oscillator to use the VLO.
 * - Sets all pins of Port 1 (P1) as output.
 * - Sets pins P2.6 and P2.7 of Port 2 (P2) as output.
 * - Clears the output of Port 2.
 * - Configures Timer A2 to generate interrupts at a specified delay.
 *
 * @return void
 */
void board_init(void);

/**
 * @brief Converts temperature value to a two-digit seven-segment format.
 *
 * This function takes a temperature value and converts it into a format suitable
 * for display on a two-digit seven-segment display. It handles cases for high
 * and low temperature thresholds, as well as negative temperatures.
 *
 * The following conversions are performed:
 * - If the temperature exceeds the defined high threshold, it sets the display
 *   to show 'H' (high).
 * - If the temperature is below the defined low threshold, it sets the display
 *   to show 'L' (low).
 * - For valid temperature values, it converts the absolute temperature to its
 *   corresponding digits for the seven-segment display.
 * - If the temperature is negative, it adds a minus sign to the display.
 *
 * @param temp The temperature value to be converted (in degrees).
 * @param dspl Pointer to a structure that holds the seven-segment display digits.
 *             The structure should have fields `digit1` and `digit0` for the two digits.
 *
 * @return void
 */
void convert_temp2d(int16_t temp, struct dspl2d *dspl);

/**
 * @brief Converts voltage value to a two-digit seven-segment format.
 *
 * This function takes a voltage value that should be represented in x10 format
 * (for example, to represent 3.3 V, the input should be 33). The function splits
 * the voltage value into two digits and formats the corresponding values for the
 * seven-segment display.
 *
 * @param voltage Voltage value in x10 format (uint16_t).
 * @param dspl Pointer to the dspl2d structure where the values for the seven-segment
 * display will be stored.
 *
 * @note The voltage value should be within the range supported by the seven-segment
 * display.
 * @note The dspl2d structure should be initialized before calling this function.
 */
void convert_volt2d(const uint16_t voltage, struct dspl2d *dspl);

/**
 * @brief Generates a delay using Low Power Mode 3 (LPM3).
 *
 * This function creates a time delay of approximately 0.667 ms multiplied by the
 * specified parameter `n_x667mks`. It configures the Timer_A module to generate
 * an interrupt after the specified delay and enters Low Power Mode 3 to conserve
 * energy during the delay period.
 *
 * @param n_x667mks Number of 0.667 ms intervals for the delay (uint16_t).
 *
 * @note The function assumes that the Timer_A is already configured and running.
 * @note An interrupt service routine (ISR) for Timer_A should be implemented
 * to handle the interrupt generated by this function.
 */
void delay_667mks(const uint16_t n_x667mks);

/**
 * @brief Outputs a two-digit value to a seven-segment display.
 *
 * This function takes a pointer to a `dspl2d` structure containing the digits to be
 * displayed and a time duration for which each digit should be shown. The function
 * iterates a fixed number of times, alternating between displaying the first and
 * second digits on the seven-segment display, with a specified delay between each
 * display update.
 *
 * @param dspl Pointer to a `dspl2d` structure containing the digits to be displayed.
 * @param time_seg_on Duration for which each digit is displayed, in units of 0.667 ms.
 *
 * @note The function assumes that the seven-segment display is properly initialized
 * and connected to the appropriate output ports (P1OUT and P2OUT).
 * @note The total display time is approximately 0.266 seconds for the full loop.
 */
void print2d(const struct dspl2d *dspl, const uint16_t time_seg_on);

#endif
